
lab06digital.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000001a6  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098c  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035a  00000000  00000000  000013bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bf  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  8e:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
#include <util/delay.h>

// Inicializa UART a 9600 baudios
void UART_init() {
	uint16_t ubrr = 103; // UBRR para 9600 con F_CPU de 16MHz
	UBRR0H = (ubrr >> 8);
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = ubrr;
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0);  // Habilita transmisión
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8 bits
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ac:	08 95       	ret

000000ae <UART_sendChar>:
}

void UART_sendChar(char c) {
	while (!(UCSR0A & (1 << UDRE0))); // Espera a que esté listo
  ae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b2:	95 ff       	sbrs	r25, 5
  b4:	fc cf       	rjmp	.-8      	; 0xae <UART_sendChar>
	UDR0 = c;
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ba:	08 95       	ret

000000bc <UART_sendString>:
}

void UART_sendString(const char* str) {
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
	while (*str) {
  c2:	03 c0       	rjmp	.+6      	; 0xca <UART_sendString+0xe>
		UART_sendChar(*str++);
  c4:	21 96       	adiw	r28, 0x01	; 1
  c6:	0e 94 57 00 	call	0xae	; 0xae <UART_sendChar>
	while (!(UCSR0A & (1 << UDRE0))); // Espera a que esté listo
	UDR0 = c;
}

void UART_sendString(const char* str) {
	while (*str) {
  ca:	88 81       	ld	r24, Y
  cc:	81 11       	cpse	r24, r1
  ce:	fa cf       	rjmp	.-12     	; 0xc4 <UART_sendString+0x8>
		UART_sendChar(*str++);
	}
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <setup>:

void setup() {
	// Configura PD2 a PD7 como entradas
	DDRD &= ~(1 << PD2 | 1 << PD3 | 1 << PD4 | 1 << PD5 | 1 << PD6 | 1 << PD7);
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	83 70       	andi	r24, 0x03	; 3
  da:	8a b9       	out	0x0a, r24	; 10
	// Activa resistencias pull-up internas (opcional)
	PORTD |= (1 << PD2 | 1 << PD3 | 1 << PD4 | 1 << PD5 | 1 << PD6 | 1 << PD7);
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	8c 6f       	ori	r24, 0xFC	; 252
  e0:	8b b9       	out	0x0b, r24	; 11

	UART_init();
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
  e6:	08 95       	ret

000000e8 <main>:
}

int main(void) {
	setup();
  e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <setup>

	while (1) {
		if (!(PIND & (1 << PD2))) {
  ec:	4a 99       	sbic	0x09, 2	; 9
  ee:	0d c0       	rjmp	.+26     	; 0x10a <main+0x22>
			UART_sendString("Arriba\r\n");
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	83 ec       	ldi	r24, 0xC3	; 195
  fc:	99 e0       	ldi	r25, 0x09	; 9
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x16>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x20>
 108:	00 00       	nop
			_delay_ms(200);
		}
		if (!(PIND & (1 << PD3))) {
 10a:	4b 99       	sbic	0x09, 3	; 9
 10c:	0d c0       	rjmp	.+26     	; 0x128 <main+0x40>
			UART_sendString("Abajo\r\n");
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendString>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ec       	ldi	r24, 0xC3	; 195
 11a:	99 e0       	ldi	r25, 0x09	; 9
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x34>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x3e>
 126:	00 00       	nop
			_delay_ms(200);
		}
		if (!(PIND & (1 << PD4))) {
 128:	4c 99       	sbic	0x09, 4	; 9
 12a:	0d c0       	rjmp	.+26     	; 0x146 <main+0x5e>
			UART_sendString("Izquierda\r\n");
 12c:	81 e1       	ldi	r24, 0x11	; 17
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendString>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x52>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x5c>
 144:	00 00       	nop
			_delay_ms(200);
		}
		if (!(PIND & (1 << PD5))) {
 146:	4d 99       	sbic	0x09, 5	; 9
 148:	0d c0       	rjmp	.+26     	; 0x164 <main+0x7c>
			UART_sendString("Derecha\r\n");
 14a:	8d e1       	ldi	r24, 0x1D	; 29
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendString>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	83 ec       	ldi	r24, 0xC3	; 195
 156:	99 e0       	ldi	r25, 0x09	; 9
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x70>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x7a>
 162:	00 00       	nop
			_delay_ms(200);
		}
		if (!(PIND & (1 << PD6))) {
 164:	4e 99       	sbic	0x09, 6	; 9
 166:	0d c0       	rjmp	.+26     	; 0x182 <main+0x9a>
			UART_sendString("A\r\n");
 168:	87 e2       	ldi	r24, 0x27	; 39
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendString>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	83 ec       	ldi	r24, 0xC3	; 195
 174:	99 e0       	ldi	r25, 0x09	; 9
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x8e>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x98>
 180:	00 00       	nop
			_delay_ms(200);
		}
		if (!(PIND & (1 << PD7))) {
 182:	4f 99       	sbic	0x09, 7	; 9
 184:	b3 cf       	rjmp	.-154    	; 0xec <main+0x4>
			UART_sendString("B\r\n");
 186:	8b e2       	ldi	r24, 0x2B	; 43
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendString>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	83 ec       	ldi	r24, 0xC3	; 195
 192:	99 e0       	ldi	r25, 0x09	; 9
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xac>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xb6>
 19e:	00 00       	nop
 1a0:	a5 cf       	rjmp	.-182    	; 0xec <main+0x4>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
